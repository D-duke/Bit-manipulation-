A shell is simply a program that takes commands entered by the user and calls the operating system to run those commands. There are several steps the shell follows, which are listed below;
It is a command-line interpreter that reads input from the user through an interface called a terminal emulator.
A shell implementation is divided into three parts: The parser, the executor, and the shell subsystems.
The Parser: This is the component that takes the command line and splits it into tokens.After the command above is typed into the shell and the ENTER key pressed, the shell takes this input and stores it into an array of characters including the newline character and \0 - which shows the end of a string.
The Executor: This takes the Command Table (in the case, the array of strings) prepared by the parser and create a new process from it. Before a new process can be created, it will take the first element of the Command Table above, which is the command (all other elements are arguments passed to the command) and does some searches. It checks the built-in commands.
The shell comes with some built-in commands that make life easier for the user. These built-in commands are implementation-specific. They are usually stored in an array of structs. A struct is a user-defined data type. In this case, the struct usually consists of two elements, the name of the command (builtin) and a pointer to the appropriate function.
This means that when a command is to be executed by the executor, it first checks the command in the builtins. If the command is present, it runs the appropriate function to execute that, else, it checks if the command provided is not a path, then it tries to look for the executable file with the command's name in the environmental variable PATH. This variable contains a list of paths where programs are stored. If you want to see the environmental variables present on your system, enter the command "env" and it will come rushing out to you. If the command is found in the PATH variable, then it creates a new process to run the command.
A new process is created using the fork system call.
